{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { isBigNumber, isComplex, isFraction, isMatrix, isUnit } from '../../utils/is';\nimport { isFactory, stripOptionalNotation } from '../../utils/factory';\nimport { hasOwnProperty, lazy } from '../../utils/object';\nimport { contains } from '../../utils/array';\nimport { ArgumentsError } from '../../error/ArgumentsError';\nexport function importFactory(typed, load, math, importedFactories) {\n  /**\n   * Import functions from an object or a module.\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *    math.import(functions)\n   *    math.import(functions, options)\n   *\n   * Where:\n   *\n   * - `functions: Object`\n   *   An object with functions or factories to be imported.\n   * - `options: Object` An object with import options. Available options:\n   *   - `override: boolean`\n   *     If true, existing functions will be overwritten. False by default.\n   *   - `silent: boolean`\n   *     If true, the function will not throw errors on duplicates or invalid\n   *     types. False by default.\n   *   - `wrap: boolean`\n   *     If true, the functions will be wrapped in a wrapper function\n   *     which converts data types like Matrix to primitive data types like Array.\n   *     The wrapper is needed when extending math.js with libraries which do not\n   *     support these data type. False by default.\n   *\n   * Examples:\n   *\n   *    import { create, all } from 'mathjs'\n   *    import * as numbers from 'numbers'\n   *\n   *    // create a mathjs instance\n   *    const math = create(all)\n   *\n   *    // define new functions and variables\n   *    math.import({\n   *      myvalue: 42,\n   *      hello: function (name) {\n   *        return 'hello, ' + name + '!'\n   *      }\n   *    })\n   *\n   *    // use the imported function and variable\n   *    math.myvalue * 2               // 84\n   *    math.hello('user')             // 'hello, user!'\n   *\n   *    // import the npm module 'numbers'\n   *    // (must be installed first with `npm install numbers`)\n   *    math.import(numbers, {wrap: true})\n   *\n   *    math.fibonacci(7) // returns 13\n   *\n   * @param {Object | Array} functions  Object with functions to be imported.\n   * @param {Object} [options]          Import options.\n   */\n  function mathImport(functions, options) {\n    var num = arguments.length;\n\n    if (num !== 1 && num !== 2) {\n      throw new ArgumentsError('import', num, 1, 2);\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    function flattenImports(flatValues, value, name) {\n      if (Array.isArray(value)) {\n        value.forEach(function (item) {\n          return flattenImports(flatValues, item);\n        });\n      } else if (_typeof(value) === 'object') {\n        for (var _name in value) {\n          if (hasOwnProperty(value, _name)) {\n            flattenImports(flatValues, value[_name], _name);\n          }\n        }\n      } else if (isFactory(value) || name !== undefined) {\n        var flatName = isFactory(value) ? isTransformFunctionFactory(value) ? value.fn + '.transform' : // TODO: this is ugly\n        value.fn : name; // we allow importing the same function twice if it points to the same implementation\n\n        if (hasOwnProperty(flatValues, flatName) && flatValues[flatName] !== value && !options.silent) {\n          throw new Error('Cannot import \"' + flatName + '\" twice');\n        }\n\n        flatValues[flatName] = value;\n      } else {\n        if (!options.silent) {\n          throw new TypeError('Factory, Object, or Array expected');\n        }\n      }\n    }\n\n    var flatValues = {};\n    flattenImports(flatValues, functions);\n\n    for (var name in flatValues) {\n      if (hasOwnProperty(flatValues, name)) {\n        // console.log('import', name)\n        var value = flatValues[name];\n\n        if (isFactory(value)) {\n          // we ignore name here and enforce the name of the factory\n          // maybe at some point we do want to allow overriding it\n          // in that case we can implement an option overrideFactoryNames: true\n          _importFactory(value, options);\n        } else if (isSupportedType(value)) {\n          _import(name, value, options);\n        } else {\n          if (!options.silent) {\n            throw new TypeError('Factory, Object, or Array expected');\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Add a property to the math namespace\n   * @param {string} name\n   * @param {*} value\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n\n\n  function _import(name, value, options) {\n    // TODO: refactor this function, it's to complicated and contains duplicate code\n    if (options.wrap && typeof value === 'function') {\n      // create a wrapper around the function\n      value = _wrap(value);\n    } // turn a plain function with a typed-function signature into a typed-function\n\n\n    if (hasTypedFunctionSignature(value)) {\n      value = typed(name, _defineProperty({}, value.signature, value));\n    }\n\n    if (isTypedFunction(math[name]) && isTypedFunction(value)) {\n      if (options.override) {\n        // give the typed function the right name\n        value = typed(name, value.signatures);\n      } else {\n        // merge the existing and typed function\n        value = typed(math[name], value);\n      }\n\n      math[name] = value;\n      delete importedFactories[name];\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (math[name] === undefined || options.override) {\n      math[name] = value;\n      delete importedFactories[name];\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (!options.silent) {\n      throw new Error('Cannot import \"' + name + '\": already exists');\n    }\n  }\n\n  function _importTransform(name, value) {\n    if (value && typeof value.transform === 'function') {\n      math.expression.transform[name] = value.transform;\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value.transform;\n      }\n    } else {\n      // remove existing transform\n      delete math.expression.transform[name];\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value;\n      }\n    }\n  }\n\n  function _deleteTransform(name) {\n    delete math.expression.transform[name];\n\n    if (allowedInExpressions(name)) {\n      math.expression.mathWithTransform[name] = math[name];\n    } else {\n      delete math.expression.mathWithTransform[name];\n    }\n  }\n  /**\n   * Create a wrapper a round an function which converts the arguments\n   * to their primitive values (like convert a Matrix to Array)\n   * @param {Function} fn\n   * @return {Function} Returns the wrapped function\n   * @private\n   */\n\n\n  function _wrap(fn) {\n    var wrapper = function wrapper() {\n      var args = [];\n\n      for (var i = 0, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        args[i] = arg && arg.valueOf();\n      }\n\n      return fn.apply(math, args);\n    };\n\n    if (fn.transform) {\n      wrapper.transform = fn.transform;\n    }\n\n    return wrapper;\n  }\n  /**\n   * Import an instance of a factory into math.js\n   * @param {function(scope: object)} factory\n   * @param {Object} options  See import for a description of the options\n   * @param {string} [name=factory.name] Optional custom name\n   * @private\n   */\n\n\n  function _importFactory(factory, options) {\n    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : factory.fn;\n\n    if (contains(name, '.')) {\n      throw new Error('Factory name should not contain a nested path. ' + 'Name: ' + JSON.stringify(name));\n    }\n\n    var namespace = isTransformFunctionFactory(factory) ? math.expression.transform : math;\n    var existingTransform = (name in math.expression.transform);\n    var existing = hasOwnProperty(namespace, name) ? namespace[name] : undefined;\n\n    var resolver = function resolver() {\n      // collect all dependencies, handle finding both functions and classes and other special cases\n      var dependencies = {};\n      factory.dependencies.map(stripOptionalNotation).forEach(function (dependency) {\n        if (contains(dependency, '.')) {\n          throw new Error('Factory dependency should not contain a nested path. ' + 'Name: ' + JSON.stringify(dependency));\n        }\n\n        if (dependency === 'math') {\n          dependencies.math = math;\n        } else if (dependency === 'mathWithTransform') {\n          dependencies.mathWithTransform = math.expression.mathWithTransform;\n        } else if (dependency === 'classes') {\n          // special case for json reviver\n          dependencies.classes = math;\n        } else {\n          dependencies[dependency] = math[dependency];\n        }\n      });\n      var instance = /* #__PURE__ */factory(dependencies);\n\n      if (instance && typeof instance.transform === 'function') {\n        throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path=\"expression.transform\"');\n      }\n\n      if (existing === undefined || options.override) {\n        return instance;\n      }\n\n      if (isTypedFunction(existing) && isTypedFunction(instance)) {\n        // merge the existing and new typed function\n        return typed(existing, instance);\n      }\n\n      if (options.silent) {\n        // keep existing, ignore imported function\n        return existing;\n      } else {\n        throw new Error('Cannot import \"' + name + '\": already exists');\n      }\n    }; // TODO: add unit test with non-lazy factory\n\n\n    if (!factory.meta || factory.meta.lazy !== false) {\n      lazy(namespace, name, resolver); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)\n\n      if (existing && existingTransform) {\n        _deleteTransform(name);\n      } else {\n        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {\n          lazy(math.expression.mathWithTransform, name, function () {\n            return namespace[name];\n          });\n        }\n      }\n    } else {\n      namespace[name] = resolver(); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)\n\n      if (existing && existingTransform) {\n        _deleteTransform(name);\n      } else {\n        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {\n          lazy(math.expression.mathWithTransform, name, function () {\n            return namespace[name];\n          });\n        }\n      }\n    } // TODO: improve factories, store a list with imports instead which can be re-played\n\n\n    importedFactories[name] = factory;\n    math.emit('import', name, resolver);\n  }\n  /**\n   * Check whether given object is a type which can be imported\n   * @param {Function | number | string | boolean | null | Unit | Complex} object\n   * @return {boolean}\n   * @private\n   */\n\n\n  function isSupportedType(object) {\n    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || isUnit(object) || isComplex(object) || isBigNumber(object) || isFraction(object) || isMatrix(object) || Array.isArray(object);\n  }\n  /**\n   * Test whether a given thing is a typed-function\n   * @param {*} fn\n   * @return {boolean} Returns true when `fn` is a typed-function\n   */\n\n\n  function isTypedFunction(fn) {\n    return typeof fn === 'function' && _typeof(fn.signatures) === 'object';\n  }\n\n  function hasTypedFunctionSignature(fn) {\n    return typeof fn === 'function' && typeof fn.signature === 'string';\n  }\n\n  function allowedInExpressions(name) {\n    return !hasOwnProperty(unsafe, name);\n  }\n\n  function factoryAllowedInExpressions(factory) {\n    return factory.fn.indexOf('.') === -1 && // FIXME: make checking on path redundant, check on meta data instead\n    !hasOwnProperty(unsafe, factory.fn) && (!factory.meta || !factory.meta.isClass);\n  }\n\n  function isTransformFunctionFactory(factory) {\n    return factory !== undefined && factory.meta !== undefined && factory.meta.isTransformFunction === true || false;\n  } // namespaces and functions not available in the parser for safety reasons\n\n\n  var unsafe = {\n    expression: true,\n    type: true,\n    docs: true,\n    error: true,\n    json: true,\n    chain: true // chain method not supported. Note that there is a unit chain too.\n\n  };\n  return mathImport;\n}","map":{"version":3,"sources":["C:/Websites/Wagner Projects/Savvy_Shopper/savvy-shopper/node_modules/mathjs/es/core/function/import.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_typeof","Symbol","iterator","constructor","prototype","isBigNumber","isComplex","isFraction","isMatrix","isUnit","isFactory","stripOptionalNotation","hasOwnProperty","lazy","contains","ArgumentsError","importFactory","typed","load","math","importedFactories","mathImport","functions","options","num","arguments","length","flattenImports","flatValues","name","Array","isArray","forEach","item","_name","undefined","flatName","isTransformFunctionFactory","fn","silent","Error","TypeError","_importFactory","isSupportedType","_import","wrap","_wrap","hasTypedFunctionSignature","signature","isTypedFunction","override","signatures","_importTransform","emit","resolver","transform","expression","allowedInExpressions","mathWithTransform","_deleteTransform","wrapper","args","i","len","arg","valueOf","apply","factory","JSON","stringify","namespace","existingTransform","existing","dependencies","map","dependency","classes","instance","meta","factoryAllowedInExpressions","object","unsafe","indexOf","isClass","isTransformFunction","type","docs","error","json","chain"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { isBigNumber, isComplex, isFraction, isMatrix, isUnit } from '../../utils/is';\nimport { isFactory, stripOptionalNotation } from '../../utils/factory';\nimport { hasOwnProperty, lazy } from '../../utils/object';\nimport { contains } from '../../utils/array';\nimport { ArgumentsError } from '../../error/ArgumentsError';\nexport function importFactory(typed, load, math, importedFactories) {\n  /**\n   * Import functions from an object or a module.\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *    math.import(functions)\n   *    math.import(functions, options)\n   *\n   * Where:\n   *\n   * - `functions: Object`\n   *   An object with functions or factories to be imported.\n   * - `options: Object` An object with import options. Available options:\n   *   - `override: boolean`\n   *     If true, existing functions will be overwritten. False by default.\n   *   - `silent: boolean`\n   *     If true, the function will not throw errors on duplicates or invalid\n   *     types. False by default.\n   *   - `wrap: boolean`\n   *     If true, the functions will be wrapped in a wrapper function\n   *     which converts data types like Matrix to primitive data types like Array.\n   *     The wrapper is needed when extending math.js with libraries which do not\n   *     support these data type. False by default.\n   *\n   * Examples:\n   *\n   *    import { create, all } from 'mathjs'\n   *    import * as numbers from 'numbers'\n   *\n   *    // create a mathjs instance\n   *    const math = create(all)\n   *\n   *    // define new functions and variables\n   *    math.import({\n   *      myvalue: 42,\n   *      hello: function (name) {\n   *        return 'hello, ' + name + '!'\n   *      }\n   *    })\n   *\n   *    // use the imported function and variable\n   *    math.myvalue * 2               // 84\n   *    math.hello('user')             // 'hello, user!'\n   *\n   *    // import the npm module 'numbers'\n   *    // (must be installed first with `npm install numbers`)\n   *    math.import(numbers, {wrap: true})\n   *\n   *    math.fibonacci(7) // returns 13\n   *\n   * @param {Object | Array} functions  Object with functions to be imported.\n   * @param {Object} [options]          Import options.\n   */\n  function mathImport(functions, options) {\n    var num = arguments.length;\n\n    if (num !== 1 && num !== 2) {\n      throw new ArgumentsError('import', num, 1, 2);\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    function flattenImports(flatValues, value, name) {\n      if (Array.isArray(value)) {\n        value.forEach(function (item) {\n          return flattenImports(flatValues, item);\n        });\n      } else if (_typeof(value) === 'object') {\n        for (var _name in value) {\n          if (hasOwnProperty(value, _name)) {\n            flattenImports(flatValues, value[_name], _name);\n          }\n        }\n      } else if (isFactory(value) || name !== undefined) {\n        var flatName = isFactory(value) ? isTransformFunctionFactory(value) ? value.fn + '.transform' : // TODO: this is ugly\n        value.fn : name; // we allow importing the same function twice if it points to the same implementation\n\n        if (hasOwnProperty(flatValues, flatName) && flatValues[flatName] !== value && !options.silent) {\n          throw new Error('Cannot import \"' + flatName + '\" twice');\n        }\n\n        flatValues[flatName] = value;\n      } else {\n        if (!options.silent) {\n          throw new TypeError('Factory, Object, or Array expected');\n        }\n      }\n    }\n\n    var flatValues = {};\n    flattenImports(flatValues, functions);\n\n    for (var name in flatValues) {\n      if (hasOwnProperty(flatValues, name)) {\n        // console.log('import', name)\n        var value = flatValues[name];\n\n        if (isFactory(value)) {\n          // we ignore name here and enforce the name of the factory\n          // maybe at some point we do want to allow overriding it\n          // in that case we can implement an option overrideFactoryNames: true\n          _importFactory(value, options);\n        } else if (isSupportedType(value)) {\n          _import(name, value, options);\n        } else {\n          if (!options.silent) {\n            throw new TypeError('Factory, Object, or Array expected');\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Add a property to the math namespace\n   * @param {string} name\n   * @param {*} value\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n\n\n  function _import(name, value, options) {\n    // TODO: refactor this function, it's to complicated and contains duplicate code\n    if (options.wrap && typeof value === 'function') {\n      // create a wrapper around the function\n      value = _wrap(value);\n    } // turn a plain function with a typed-function signature into a typed-function\n\n\n    if (hasTypedFunctionSignature(value)) {\n      value = typed(name, _defineProperty({}, value.signature, value));\n    }\n\n    if (isTypedFunction(math[name]) && isTypedFunction(value)) {\n      if (options.override) {\n        // give the typed function the right name\n        value = typed(name, value.signatures);\n      } else {\n        // merge the existing and typed function\n        value = typed(math[name], value);\n      }\n\n      math[name] = value;\n      delete importedFactories[name];\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (math[name] === undefined || options.override) {\n      math[name] = value;\n      delete importedFactories[name];\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (!options.silent) {\n      throw new Error('Cannot import \"' + name + '\": already exists');\n    }\n  }\n\n  function _importTransform(name, value) {\n    if (value && typeof value.transform === 'function') {\n      math.expression.transform[name] = value.transform;\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value.transform;\n      }\n    } else {\n      // remove existing transform\n      delete math.expression.transform[name];\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value;\n      }\n    }\n  }\n\n  function _deleteTransform(name) {\n    delete math.expression.transform[name];\n\n    if (allowedInExpressions(name)) {\n      math.expression.mathWithTransform[name] = math[name];\n    } else {\n      delete math.expression.mathWithTransform[name];\n    }\n  }\n  /**\n   * Create a wrapper a round an function which converts the arguments\n   * to their primitive values (like convert a Matrix to Array)\n   * @param {Function} fn\n   * @return {Function} Returns the wrapped function\n   * @private\n   */\n\n\n  function _wrap(fn) {\n    var wrapper = function wrapper() {\n      var args = [];\n\n      for (var i = 0, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        args[i] = arg && arg.valueOf();\n      }\n\n      return fn.apply(math, args);\n    };\n\n    if (fn.transform) {\n      wrapper.transform = fn.transform;\n    }\n\n    return wrapper;\n  }\n  /**\n   * Import an instance of a factory into math.js\n   * @param {function(scope: object)} factory\n   * @param {Object} options  See import for a description of the options\n   * @param {string} [name=factory.name] Optional custom name\n   * @private\n   */\n\n\n  function _importFactory(factory, options) {\n    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : factory.fn;\n\n    if (contains(name, '.')) {\n      throw new Error('Factory name should not contain a nested path. ' + 'Name: ' + JSON.stringify(name));\n    }\n\n    var namespace = isTransformFunctionFactory(factory) ? math.expression.transform : math;\n    var existingTransform = (name in math.expression.transform);\n    var existing = hasOwnProperty(namespace, name) ? namespace[name] : undefined;\n\n    var resolver = function resolver() {\n      // collect all dependencies, handle finding both functions and classes and other special cases\n      var dependencies = {};\n      factory.dependencies.map(stripOptionalNotation).forEach(function (dependency) {\n        if (contains(dependency, '.')) {\n          throw new Error('Factory dependency should not contain a nested path. ' + 'Name: ' + JSON.stringify(dependency));\n        }\n\n        if (dependency === 'math') {\n          dependencies.math = math;\n        } else if (dependency === 'mathWithTransform') {\n          dependencies.mathWithTransform = math.expression.mathWithTransform;\n        } else if (dependency === 'classes') {\n          // special case for json reviver\n          dependencies.classes = math;\n        } else {\n          dependencies[dependency] = math[dependency];\n        }\n      });\n      var instance = /* #__PURE__ */factory(dependencies);\n\n      if (instance && typeof instance.transform === 'function') {\n        throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path=\"expression.transform\"');\n      }\n\n      if (existing === undefined || options.override) {\n        return instance;\n      }\n\n      if (isTypedFunction(existing) && isTypedFunction(instance)) {\n        // merge the existing and new typed function\n        return typed(existing, instance);\n      }\n\n      if (options.silent) {\n        // keep existing, ignore imported function\n        return existing;\n      } else {\n        throw new Error('Cannot import \"' + name + '\": already exists');\n      }\n    }; // TODO: add unit test with non-lazy factory\n\n\n    if (!factory.meta || factory.meta.lazy !== false) {\n      lazy(namespace, name, resolver); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)\n\n      if (existing && existingTransform) {\n        _deleteTransform(name);\n      } else {\n        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {\n          lazy(math.expression.mathWithTransform, name, function () {\n            return namespace[name];\n          });\n        }\n      }\n    } else {\n      namespace[name] = resolver(); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)\n\n      if (existing && existingTransform) {\n        _deleteTransform(name);\n      } else {\n        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {\n          lazy(math.expression.mathWithTransform, name, function () {\n            return namespace[name];\n          });\n        }\n      }\n    } // TODO: improve factories, store a list with imports instead which can be re-played\n\n\n    importedFactories[name] = factory;\n    math.emit('import', name, resolver);\n  }\n  /**\n   * Check whether given object is a type which can be imported\n   * @param {Function | number | string | boolean | null | Unit | Complex} object\n   * @return {boolean}\n   * @private\n   */\n\n\n  function isSupportedType(object) {\n    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || isUnit(object) || isComplex(object) || isBigNumber(object) || isFraction(object) || isMatrix(object) || Array.isArray(object);\n  }\n  /**\n   * Test whether a given thing is a typed-function\n   * @param {*} fn\n   * @return {boolean} Returns true when `fn` is a typed-function\n   */\n\n\n  function isTypedFunction(fn) {\n    return typeof fn === 'function' && _typeof(fn.signatures) === 'object';\n  }\n\n  function hasTypedFunctionSignature(fn) {\n    return typeof fn === 'function' && typeof fn.signature === 'string';\n  }\n\n  function allowedInExpressions(name) {\n    return !hasOwnProperty(unsafe, name);\n  }\n\n  function factoryAllowedInExpressions(factory) {\n    return factory.fn.indexOf('.') === -1 && // FIXME: make checking on path redundant, check on meta data instead\n    !hasOwnProperty(unsafe, factory.fn) && (!factory.meta || !factory.meta.isClass);\n  }\n\n  function isTransformFunctionFactory(factory) {\n    return factory !== undefined && factory.meta !== undefined && factory.meta.isTransformFunction === true || false;\n  } // namespaces and functions not available in the parser for safety reasons\n\n\n  var unsafe = {\n    expression: true,\n    type: true,\n    docs: true,\n    error: true,\n    json: true,\n    chain: true // chain method not supported. Note that there is a unit chain too.\n\n  };\n  return mathImport;\n}"]},"metadata":{},"sourceType":"module"}