{"ast":null,"code":"/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'auto':\n      {\n        // determine lower and upper bound for exponential notation.\n        // TODO: implement support for upper and lower to be BigNumbers themselves\n        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero\n\n        if (value.isZero()) return '0'; // determine whether or not to output exponential notation\n\n        var str;\n        var rounded = value.toSignificantDigits(precision);\n        var exp = rounded.e;\n\n        if (exp >= lowerExp && exp < upperExp) {\n          // normal number notation\n          str = rounded.toFixed();\n        } else {\n          // exponential notation\n          str = toExponential(value, precision);\n        } // remove trailing zeros after the decimal point\n\n\n        return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n          var digits = arguments[2];\n          var e = arguments[4];\n          return digits !== '.' ? digits + e : e;\n        });\n      }\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n}\n/**\n * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {BigNumber | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  // find nearest lower multiple of 3 for exponent\n  var e = value.e;\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent\n\n  var valueWithoutExp = value.mul(Math.pow(10, -newExp));\n  var valueStr = valueWithoutExp.toPrecision(precision);\n\n  if (valueStr.indexOf('e') !== -1) {\n    valueStr = valueWithoutExp.toString();\n  }\n\n  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\n\nexport function toExponential(value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n}\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=undefined] Optional number of decimals after the\n *                                       decimal point. Undefined by default.\n */\n\nexport function toFixed(value, precision) {\n  return value.toFixed(precision);\n}","map":{"version":3,"sources":["C:/Websites/Wagner Projects/Savvy_Shopper/savvy-shopper/node_modules/mathjs/es/utils/bignumber/formatter.js"],"names":["format","value","options","isFinite","isNaN","gt","notation","precision","undefined","toFixed","toExponential","toEngineering","lowerExp","upperExp","isZero","str","rounded","toSignificantDigits","exp","e","replace","digits","arguments","Error","newExp","valueWithoutExp","mul","Math","pow","valueStr","toPrecision","indexOf","toString"],"mappings":"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","sourcesContent":["/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'auto':\n      {\n        // determine lower and upper bound for exponential notation.\n        // TODO: implement support for upper and lower to be BigNumbers themselves\n        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero\n\n        if (value.isZero()) return '0'; // determine whether or not to output exponential notation\n\n        var str;\n        var rounded = value.toSignificantDigits(precision);\n        var exp = rounded.e;\n\n        if (exp >= lowerExp && exp < upperExp) {\n          // normal number notation\n          str = rounded.toFixed();\n        } else {\n          // exponential notation\n          str = toExponential(value, precision);\n        } // remove trailing zeros after the decimal point\n\n\n        return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n          var digits = arguments[2];\n          var e = arguments[4];\n          return digits !== '.' ? digits + e : e;\n        });\n      }\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n}\n/**\n * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {BigNumber | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  // find nearest lower multiple of 3 for exponent\n  var e = value.e;\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent\n\n  var valueWithoutExp = value.mul(Math.pow(10, -newExp));\n  var valueStr = valueWithoutExp.toPrecision(precision);\n\n  if (valueStr.indexOf('e') !== -1) {\n    valueStr = valueWithoutExp.toString();\n  }\n\n  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\n\nexport function toExponential(value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n}\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=undefined] Optional number of decimals after the\n *                                       decimal point. Undefined by default.\n */\n\nexport function toFixed(value, precision) {\n  return value.toFixed(precision);\n}"]},"metadata":{},"sourceType":"module"}