{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nvar name = 'fix';\nvar dependencies = ['typed', 'Complex', 'ceil', 'floor'];\nexport var createFix = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _Complex = _ref.Complex,\n      ceil = _ref.ceil,\n      floor = _ref.floor;\n  /**\n   * Round a value towards zero.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.fix(x)\n   *\n   * Examples:\n   *\n   *    math.fix(3.2)                // returns number 3\n   *    math.fix(3.8)                // returns number 3\n   *    math.fix(-4.2)               // returns number -4\n   *    math.fix(-4.7)               // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.fix(c)                  // returns Complex 3 - 2i\n   *\n   *    math.fix([3.2, 3.8, -4.7])   // returns Array [3, 3, -4]\n   *\n   * See also:\n   *\n   *    ceil, floor, round\n   *\n   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value\n   */\n\n  return typed('fix', {\n    number: function number(x) {\n      return x > 0 ? floor(x) : ceil(x);\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isNegative() ? ceil(x) : floor(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.s < 0 ? x.ceil() : x.floor();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since fix(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Websites/Wagner Projects/Savvy_Shopper/savvy-shopper/node_modules/mathjs/es/function/arithmetic/fix.js"],"names":["factory","deepMap","name","dependencies","createFix","_ref","typed","_Complex","Complex","ceil","floor","number","x","re","Math","im","BigNumber","isNegative","Fraction","s","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB,EAA6B,OAA7B,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACG,OADpB;AAAA,MAEIC,IAAI,GAAGJ,IAAI,CAACI,IAFhB;AAAA,MAGIC,KAAK,GAAGL,IAAI,CAACK,KAHjB;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAOJ,KAAK,CAAC,KAAD,EAAQ;AAClBK,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,aAAOA,CAAC,GAAG,CAAJ,GAAQF,KAAK,CAACE,CAAD,CAAb,GAAmBH,IAAI,CAACG,CAAD,CAA9B;AACD,KAHiB;AAIlBJ,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBI,CAAjB,EAAoB;AAC3B,aAAO,IAAIL,QAAJ,CAAaK,CAAC,CAACC,EAAF,GAAO,CAAP,GAAWC,IAAI,CAACJ,KAAL,CAAWE,CAAC,CAACC,EAAb,CAAX,GAA8BC,IAAI,CAACL,IAAL,CAAUG,CAAC,CAACC,EAAZ,CAA3C,EAA4DD,CAAC,CAACG,EAAF,GAAO,CAAP,GAAWD,IAAI,CAACJ,KAAL,CAAWE,CAAC,CAACG,EAAb,CAAX,GAA8BD,IAAI,CAACL,IAAL,CAAUG,CAAC,CAACG,EAAZ,CAA1F,CAAP;AACD,KANiB;AAOlBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBJ,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACK,UAAF,KAAiBR,IAAI,CAACG,CAAD,CAArB,GAA2BF,KAAK,CAACE,CAAD,CAAvC;AACD,KATiB;AAUlBM,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBN,CAAlB,EAAqB;AAC7B,aAAOA,CAAC,CAACO,CAAF,GAAM,CAAN,GAAUP,CAAC,CAACH,IAAF,EAAV,GAAqBG,CAAC,CAACF,KAAF,EAA5B;AACD,KAZiB;AAalB,sBAAkB,SAASU,WAAT,CAAqBR,CAArB,EAAwB;AACxC;AACA,aAAOX,OAAO,CAACW,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;AACD;AAhBiB,GAAR,CAAZ;AAkBD,CAnD4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nvar name = 'fix';\nvar dependencies = ['typed', 'Complex', 'ceil', 'floor'];\nexport var createFix = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _Complex = _ref.Complex,\n      ceil = _ref.ceil,\n      floor = _ref.floor;\n\n  /**\n   * Round a value towards zero.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.fix(x)\n   *\n   * Examples:\n   *\n   *    math.fix(3.2)                // returns number 3\n   *    math.fix(3.8)                // returns number 3\n   *    math.fix(-4.2)               // returns number -4\n   *    math.fix(-4.7)               // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.fix(c)                  // returns Complex 3 - 2i\n   *\n   *    math.fix([3.2, 3.8, -4.7])   // returns Array [3, 3, -4]\n   *\n   * See also:\n   *\n   *    ceil, floor, round\n   *\n   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value\n   */\n  return typed('fix', {\n    number: function number(x) {\n      return x > 0 ? floor(x) : ceil(x);\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isNegative() ? ceil(x) : floor(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.s < 0 ? x.ceil() : x.floor();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since fix(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}