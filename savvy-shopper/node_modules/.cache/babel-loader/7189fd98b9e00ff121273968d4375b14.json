{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nimport { endsWith } from '../../utils/string';\nimport { clone, hasOwnProperty } from '../../utils/object';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var on = _ref.on,\n      config = _ref.config,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      pow = _ref.pow,\n      abs = _ref.abs,\n      fix = _ref.fix,\n      round = _ref.round,\n      equal = _ref.equal,\n      isNumeric = _ref.isNumeric,\n      format = _ref.format,\n      number = _ref.number,\n      Complex = _ref.Complex,\n      _BigNumber = _ref.BigNumber,\n      _Fraction = _ref.Fraction;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, name)\n   *     const b = new Unit(null, name)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [{\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE,\n        // link to a list with supported prefixes\n        power: 0\n      }];\n      this.dimensions = [];\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    var code = text.charCodeAt(index);\n\n    while (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {\n      unitName += c;\n      next();\n      code = text.charCodeAt(index);\n    } // Must begin with [a-zA-Z]\n\n\n    code = unitName.charCodeAt(0);\n\n    if (code >= 65 && code <= 90 || code >= 97 && code <= 122) {\n      return unitName || null;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitOffset = convert(this.units[0].unit.offset);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));\n    }\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      unitOffset = convert(this.units[0].unit.offset);\n\n      if (prefixValue === undefined || prefixValue === null) {\n        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);\n      } else {\n        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);\n      }\n    }\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  function _findUnit(str) {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit: unit,\n        prefix: prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    // This gives correct, but unexpected, results for units with an offset.\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\n    var ret = this.clone();\n    ret.value = ret.value !== null ? abs(ret.value) : null;\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var other;\n    var value = this.value === null ? this._normalize(1) : this.value;\n\n    if (typeof valuelessUnit === 'string') {\n      // other = new Unit(null, valuelessUnit)\n      other = Unit.parse(valuelessUnit);\n\n      if (!this.equalBase(other)) {\n        throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (other.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else if (isUnit(valuelessUnit)) {\n      if (!this.equalBase(valuelessUnit)) {\n        throw new Error(\"Units do not match ('\".concat(valuelessUnit.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (valuelessUnit.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other = valuelessUnit.clone();\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(function (x) {\n      return 0;\n    })\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    \"in\": {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    \"byte\": 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      var _c = name.charAt(i);\n\n      var isValidAlpha = function isValidAlpha(p) {\n        return /^[a-zA-Z]$/.test(p);\n      };\n\n      var _isDigit = function _isDigit(c) {\n        return c >= '0' && c <= '9';\n      };\n\n      if (i === 0 && !isValidAlpha(_c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(isValidAlpha(_c) || _isDigit(_c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (_typeof(obj) !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (_typeof(obj) === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    }\n\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["C:/Websites/Wagner Projects/Savvy_Shopper/savvy-shopper/node_modules/mathjs/es/type/unit/Unit.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_extends","Object","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","configurable","writable","isComplex","isUnit","typeOf","factory","endsWith","clone","createBigNumberPi","createPi","name","dependencies","createUnitClass","_ref","on","config","addScalar","subtract","multiplyScalar","divideScalar","pow","abs","fix","round","equal","isNumeric","format","number","Complex","_BigNumber","BigNumber","_Fraction","Fraction","toNumber","Unit","Error","undefined","TypeError","u","parse","units","dimensions","unit","UNIT_NONE","prefix","PREFIXES","NONE","power","BASE_DIMENSIONS","_normalize","fixPrefix","skipAutomaticSimplification","type","text","index","c","skipWhitespace","next","isDigitDot","isDigit","charAt","revert","oldIndex","parseNumber","tentativeNumber","tentativeIndex","parseUnit","unitName","code","charCodeAt","parseCharacter","toFind","str","options","powerMultiplierCurrent","expectingUnit","valueStr","err","parseFloat","powerMultiplierStack","powerMultiplierStackProduct","uStr","oldC","SyntaxError","toString","res","_findUnit","p","pop","base","baseDim","UNIT_SYSTEMS","auto","allowNoUnits","slice","_isDerived","Math","unitValue","unitOffset","unitPower","unitPrefixValue","convert","_getNumberConverter","offset","_denormalize","prefixValue","UNITS","prefixes","_name","_unit","prefixLen","prefixName","substring","_prefix","isValuelessUnit","hasBase","BASE_UNITS","equalBase","other","equals","multiply","_i","inverted","valThis","valOther","getNumericIfUnitless","divide","_i2","_i3","predictable","ret","W","to","valuelessUnit","concat","toNumeric","toJSON","mathjs","formatUnits","fromJSON","json","valueOf","simplify","proposedUnitList","matchingBase","currentUnitSystem","matchingUnit","missingBaseDim","toSI","si","strNum","strDen","nNum","nDen","_i4","substr","simp","isImaginary","re","VAR","VA","_bestPrefix","unitStr","absValue","absUnitValue","bestPrefix","bestDiff","log","LN10","scientific","diff","splitUnit","parts","x","xNumeric","xRounded","xFixed","isNearlyEqual","y","testSum","_i5","SHORT","da","h","k","M","G","T","P","E","Z","Y","d","m","n","f","a","z","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","SQUARED","CUBIC","BINARY_SHORT_SI","BINARY_SHORT_IEC","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi","BINARY_LONG_SI","BINARY_LONG_IEC","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","BINARY_SHORT","BINARY_LONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","ANGLE","BIT","BASE_UNIT_NONE","map","meter","inch","foot","yard","mile","link","rod","chain","angstrom","ft","yd","mi","li","rd","ch","mil","m2","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","L","l","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","fldr","floz","gi","cp","pt","qt","gal","bbl","obl","g","gram","ton","t","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","s","min","second","sec","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","rad","radian","deg","degree","grad","gradian","cycle","arcsec","arcmin","A","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","N","newton","dyn","dyne","lbf","poundforce","kip","J","joule","erg","Wh","eV","electronvolt","watt","hp","I","Pa","psi","atm","bar","torr","mmHg","mmH2O","cmH2O","coulomb","C","farad","F","volt","V","ohm","henry","H","siemens","S","weber","Wb","tesla","b","bits","B","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","lt","litres","liter","liters","teaspoons","tablespoons","minims","fluiddrams","fluidounces","gills","cups","pints","quarts","gallons","beerbarrels","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","decades","centuries","millennia","radians","degrees","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","bit","calculateAngleValues","pi","div","times","PI","curr","prev","cgs","JSON","stringify","us","setUnitSystem","join","getUnitSystem","_key","typeConverters","_key2","_name2","_unit2","alias","_key3","assertUnitNameIsValid","_c","isValidAlpha","test","_isDigit","createUnit","override","_key4","deleteUnit","aliases","lastUnit","_key5","createUnitSingle","defUnit","definition","baseName","ex","message","toUpperCase","newUnit","indexOf","newBaseUnit","_i6","anyMatch","_i7","match","j","_newBaseUnit","_i8","aliasName","_alias","_key6","isClass"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nimport { endsWith } from '../../utils/string';\nimport { clone, hasOwnProperty } from '../../utils/object';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var on = _ref.on,\n      config = _ref.config,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      pow = _ref.pow,\n      abs = _ref.abs,\n      fix = _ref.fix,\n      round = _ref.round,\n      equal = _ref.equal,\n      isNumeric = _ref.isNumeric,\n      format = _ref.format,\n      number = _ref.number,\n      Complex = _ref.Complex,\n      _BigNumber = _ref.BigNumber,\n      _Fraction = _ref.Fraction;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, name)\n   *     const b = new Unit(null, name)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [{\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE,\n        // link to a list with supported prefixes\n        power: 0\n      }];\n      this.dimensions = [];\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    var code = text.charCodeAt(index);\n\n    while (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {\n      unitName += c;\n      next();\n      code = text.charCodeAt(index);\n    } // Must begin with [a-zA-Z]\n\n\n    code = unitName.charCodeAt(0);\n\n    if (code >= 65 && code <= 90 || code >= 97 && code <= 122) {\n      return unitName || null;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitOffset = convert(this.units[0].unit.offset);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));\n    }\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      unitOffset = convert(this.units[0].unit.offset);\n\n      if (prefixValue === undefined || prefixValue === null) {\n        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);\n      } else {\n        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);\n      }\n    }\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  function _findUnit(str) {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit: unit,\n        prefix: prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    // This gives correct, but unexpected, results for units with an offset.\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\n    var ret = this.clone();\n    ret.value = ret.value !== null ? abs(ret.value) : null;\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var other;\n    var value = this.value === null ? this._normalize(1) : this.value;\n\n    if (typeof valuelessUnit === 'string') {\n      // other = new Unit(null, valuelessUnit)\n      other = Unit.parse(valuelessUnit);\n\n      if (!this.equalBase(other)) {\n        throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (other.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else if (isUnit(valuelessUnit)) {\n      if (!this.equalBase(valuelessUnit)) {\n        throw new Error(\"Units do not match ('\".concat(valuelessUnit.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (valuelessUnit.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other = valuelessUnit.clone();\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(function (x) {\n      return 0;\n    })\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    \"in\": {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    \"byte\": 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      var _c = name.charAt(i);\n\n      var isValidAlpha = function isValidAlpha(p) {\n        return /^[a-zA-Z]$/.test(p);\n      };\n\n      var _isDigit = function _isDigit(c) {\n        return c >= '0' && c <= '9';\n      };\n\n      if (i === 0 && !isValidAlpha(_c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(isValidAlpha(_c) || _isDigit(_c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (_typeof(obj) !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (_typeof(obj) === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    }\n\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}