{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { deepMap } from '../../../utils/collection';\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nexport var createFraction = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Fraction = _ref.Fraction;\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    \"null\": function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Websites/Wagner Projects/Savvy_Shopper/savvy-shopper/node_modules/mathjs/es/type/fraction/function/fraction.js"],"names":["factory","deepMap","name","dependencies","createFraction","_ref","typed","Fraction","number","x","isFinite","isNaN","Error","string","numberNumber","numerator","denominator","_null","BigNumber","toString","Object","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,UAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,UAAV,CAAnB;AACA,OAAO,IAAIC,cAAc,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACrF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACE,QADpB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAOD,KAAK,CAAC,UAAD,EAAa;AACvBE,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAI,CAACC,QAAQ,CAACD,CAAD,CAAT,IAAgBE,KAAK,CAACF,CAAD,CAAzB,EAA8B;AAC5B,cAAM,IAAIG,KAAJ,CAAUH,CAAC,GAAG,sCAAd,CAAN;AACD;;AAED,aAAO,IAAIF,QAAJ,CAAaE,CAAb,CAAP;AACD,KAPsB;AAQvBI,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBJ,CAAhB,EAAmB;AACzB,aAAO,IAAIF,QAAJ,CAAaE,CAAb,CAAP;AACD,KAVsB;AAWvB,sBAAkB,SAASK,YAAT,CAAsBC,SAAtB,EAAiCC,WAAjC,EAA8C;AAC9D,aAAO,IAAIT,QAAJ,CAAaQ,SAAb,EAAwBC,WAAxB,CAAP;AACD,KAbsB;AAcvB,YAAQ,SAASC,KAAT,CAAeR,CAAf,EAAkB;AACxB,aAAO,IAAIF,QAAJ,CAAa,CAAb,CAAP;AACD,KAhBsB;AAiBvBW,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBT,CAAnB,EAAsB;AAC/B,aAAO,IAAIF,QAAJ,CAAaE,CAAC,CAACU,QAAF,EAAb,CAAP;AACD,KAnBsB;AAoBvBZ,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBE,CAAlB,EAAqB;AAC7B,aAAOA,CAAP,CAD6B,CACnB;AACX,KAtBsB;AAuBvBW,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBX,CAAhB,EAAmB;AACzB,aAAO,IAAIF,QAAJ,CAAaE,CAAb,CAAP;AACD,KAzBsB;AA0BvB,sBAAkB,SAASY,WAAT,CAAqBZ,CAArB,EAAwB;AACxC,aAAOR,OAAO,CAACQ,CAAD,EAAI,IAAJ,CAAd;AACD;AA5BsB,GAAb,CAAZ;AA8BD,CA3DiD,CAA3C","sourcesContent":["import { factory } from '../../../utils/factory';\nimport { deepMap } from '../../../utils/collection';\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nexport var createFraction = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Fraction = _ref.Fraction;\n\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    \"null\": function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}