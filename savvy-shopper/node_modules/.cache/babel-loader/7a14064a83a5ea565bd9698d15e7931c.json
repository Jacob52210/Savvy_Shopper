{"ast":null,"code":"import { clone, mapObject, deepExtend } from '../../utils/object';\nimport { DEFAULT_CONFIG } from '../config';\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\n\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexport function configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = mapObject(config, clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\n\n      deepExtend(config, options);\n      var curr = mapObject(config, clone);\n      var changes = mapObject(options, clone); // emit 'config' event\n\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return mapObject(config, clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\n\n  Object.keys(DEFAULT_CONFIG).forEach(function (key) {\n    Object.defineProperty(_config, key, {\n      get: function get() {\n        return config[key];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(function (value) {\n      return JSON.stringify(value);\n    }).join(', ') + '.');\n  }\n}","map":{"version":3,"sources":["C:/Websites/Wagner Projects/Savvy_Shopper/savvy-shopper/node_modules/mathjs/es/core/function/config.js"],"names":["clone","mapObject","deepExtend","DEFAULT_CONFIG","MATRIX_OPTIONS","NUMBER_OPTIONS","configFactory","config","emit","_config","options","prev","validateOption","curr","changes","Object","keys","forEach","key","defineProperty","get","enumerable","configurable","contains","array","item","indexOf","name","values","undefined","console","warn","map","value","JSON","stringify","join"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,oBAA7C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAO,IAAIC,cAAc,GAAG,CAAC,QAAD,EAAW,OAAX,CAArB,C,CAA0C;;AAEjD,OAAO,IAAIC,cAAc,GAAG,CAAC,QAAD,EAAW,WAAX,EAAwB,UAAxB,CAArB,C,CAA0D;;AAEjE,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,IAA/B,EAAqC;AAC1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,WAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACxB,QAAIA,OAAJ,EAAa;AACX,UAAIC,IAAI,GAAGV,SAAS,CAACM,MAAD,EAASP,KAAT,CAApB,CADW,CAC0B;;AAErCY,MAAAA,cAAc,CAACF,OAAD,EAAU,QAAV,EAAoBN,cAApB,CAAd;AACAQ,MAAAA,cAAc,CAACF,OAAD,EAAU,QAAV,EAAoBL,cAApB,CAAd,CAJW,CAIwC;;AAEnDH,MAAAA,UAAU,CAACK,MAAD,EAASG,OAAT,CAAV;AACA,UAAIG,IAAI,GAAGZ,SAAS,CAACM,MAAD,EAASP,KAAT,CAApB;AACA,UAAIc,OAAO,GAAGb,SAAS,CAACS,OAAD,EAAUV,KAAV,CAAvB,CARW,CAQ8B;;AAEzCQ,MAAAA,IAAI,CAAC,QAAD,EAAWK,IAAX,EAAiBF,IAAjB,EAAuBG,OAAvB,CAAJ;AACA,aAAOD,IAAP;AACD,KAZD,MAYO;AACL,aAAOZ,SAAS,CAACM,MAAD,EAASP,KAAT,CAAhB;AACD;AACF,GA3DyC,CA2DxC;;;AAGFS,EAAAA,OAAO,CAACL,cAAR,GAAyBA,cAAzB;AACAK,EAAAA,OAAO,CAACJ,cAAR,GAAyBA,cAAzB,CA/D0C,CA+DD;;AAEzCU,EAAAA,MAAM,CAACC,IAAP,CAAYb,cAAZ,EAA4Bc,OAA5B,CAAoC,UAAUC,GAAV,EAAe;AACjDH,IAAAA,MAAM,CAACI,cAAP,CAAsBV,OAAtB,EAA+BS,GAA/B,EAAoC;AAClCE,MAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,eAAOb,MAAM,CAACW,GAAD,CAAb;AACD,OAHiC;AAIlCG,MAAAA,UAAU,EAAE,IAJsB;AAKlCC,MAAAA,YAAY,EAAE;AALoB,KAApC;AAOD,GARD;AASA,SAAOb,OAAP;AACD;AACD;;;;;;;AAOA,SAASc,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAC7B,SAAOD,KAAK,CAACE,OAAN,CAAcD,IAAd,MAAwB,CAAC,CAAhC;AACD;AACD;;;;;;;;AAQA,SAASb,cAAT,CAAwBF,OAAxB,EAAiCiB,IAAjC,EAAuCC,MAAvC,EAA+C;AAC7C,MAAIlB,OAAO,CAACiB,IAAD,CAAP,KAAkBE,SAAlB,IAA+B,CAACN,QAAQ,CAACK,MAAD,EAASlB,OAAO,CAACiB,IAAD,CAAhB,CAA5C,EAAqE;AACnE;AACAG,IAAAA,OAAO,CAACC,IAAR,CAAa,6BAA6BrB,OAAO,CAACiB,IAAD,CAApC,GAA6C,8BAA7C,GAA8EA,IAA9E,GAAqF,KAArF,GAA6F,qBAA7F,GAAqHC,MAAM,CAACI,GAAP,CAAW,UAAUC,KAAV,EAAiB;AAC5J,aAAOC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAP;AACD,KAFiI,EAE/HG,IAF+H,CAE1H,IAF0H,CAArH,GAEG,GAFhB;AAGD;AACF","sourcesContent":["import { clone, mapObject, deepExtend } from '../../utils/object';\nimport { DEFAULT_CONFIG } from '../config';\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\n\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexport function configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = mapObject(config, clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\n\n      deepExtend(config, options);\n      var curr = mapObject(config, clone);\n      var changes = mapObject(options, clone); // emit 'config' event\n\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return mapObject(config, clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\n\n  Object.keys(DEFAULT_CONFIG).forEach(function (key) {\n    Object.defineProperty(_config, key, {\n      get: function get() {\n        return config[key];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(function (value) {\n      return JSON.stringify(value);\n    }).join(', ') + '.');\n  }\n}"]},"metadata":{},"sourceType":"module"}