{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { clone } from '../../utils/object';\nimport { validateIndex } from '../../utils/array';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createColumn = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n  /**\n   * Return a column from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.column(value, index)\n   *\n   * Example:\n   *\n   *     // get a column\n   *     const d = [[1, 2], [3, 4]]\n   *     math.column(d, 1) // returns [[2], [4]]\n   *\n   * See also:\n   *\n   *     row\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} column           The index of the column\n   * @return {Array | Matrix}         The retrieved column\n   */\n\n  return typed(name, {\n    'Matrix, number': _column,\n    'Array, number': function ArrayNumber(value, column) {\n      return _column(matrix(clone(value)), column).valueOf();\n    }\n  });\n  /**\n   * Retrieve a column of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} column  The index of the column\n   * @return {Matrix}        The retrieved column\n   */\n\n  function _column(value, column) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    validateIndex(column, value.size()[1]);\n    var rowRange = range(0, value.size()[0]);\n    var index = new Index(rowRange, column);\n    return value.subset(index);\n  }\n});","map":{"version":3,"sources":["C:/Websites/Wagner Projects/Savvy_Shopper/savvy-shopper/node_modules/mathjs/es/function/matrix/column.js"],"names":["factory","clone","validateIndex","name","dependencies","createColumn","_ref","typed","Index","matrix","range","_column","ArrayNumber","value","column","valueOf","size","length","Error","rowRange","index","subset"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,OAA7B,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACnF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAAA,MAGIC,KAAK,GAAGJ,IAAI,CAACI,KAHjB;AAKA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAOH,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkBQ,OADD;AAEjB,qBAAiB,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AACnD,aAAOH,OAAO,CAACF,MAAM,CAACR,KAAK,CAACY,KAAD,CAAN,CAAP,EAAuBC,MAAvB,CAAP,CAAsCC,OAAtC,EAAP;AACD;AAJgB,GAAP,CAAZ;AAMA;;;;;;;AAOA,WAASJ,OAAT,CAAiBE,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B;AACA,QAAID,KAAK,CAACG,IAAN,GAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDhB,IAAAA,aAAa,CAACY,MAAD,EAASD,KAAK,CAACG,IAAN,GAAa,CAAb,CAAT,CAAb;AACA,QAAIG,QAAQ,GAAGT,KAAK,CAAC,CAAD,EAAIG,KAAK,CAACG,IAAN,GAAa,CAAb,CAAJ,CAApB;AACA,QAAII,KAAK,GAAG,IAAIZ,KAAJ,CAAUW,QAAV,EAAoBL,MAApB,CAAZ;AACA,WAAOD,KAAK,CAACQ,MAAN,CAAaD,KAAb,CAAP;AACD;AACF,CAnD+C,CAAzC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { clone } from '../../utils/object';\nimport { validateIndex } from '../../utils/array';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createColumn = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n\n  /**\n   * Return a column from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.column(value, index)\n   *\n   * Example:\n   *\n   *     // get a column\n   *     const d = [[1, 2], [3, 4]]\n   *     math.column(d, 1) // returns [[2], [4]]\n   *\n   * See also:\n   *\n   *     row\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} column           The index of the column\n   * @return {Array | Matrix}         The retrieved column\n   */\n  return typed(name, {\n    'Matrix, number': _column,\n    'Array, number': function ArrayNumber(value, column) {\n      return _column(matrix(clone(value)), column).valueOf();\n    }\n  });\n  /**\n   * Retrieve a column of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} column  The index of the column\n   * @return {Matrix}        The retrieved column\n   */\n\n  function _column(value, column) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    validateIndex(column, value.size()[1]);\n    var rowRange = range(0, value.size()[0]);\n    var index = new Index(rowRange, column);\n    return value.subset(index);\n  }\n});"]},"metadata":{},"sourceType":"module"}