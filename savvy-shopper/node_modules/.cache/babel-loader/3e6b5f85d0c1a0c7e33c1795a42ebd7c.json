{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { tanh as _tanh } from '../../utils/number';\nvar name = 'tanh';\nvar dependencies = ['typed'];\nexport var createTanh = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Calculate the hyperbolic tangent of a value,\n   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.tanh(x)\n   *\n   * Examples:\n   *\n   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n   *    math.tanh(0.5)                   // returns 0.46211715726000974\n   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974\n   *    1 / math.coth(0.5)               // returns 0.46211715726000974\n   *\n   * See also:\n   *\n   *    sinh, cosh, coth\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x\n   */\n\n  return typed('tanh', {\n    number: _tanh,\n    Complex: function Complex(x) {\n      return x.tanh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.tanh();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function tanh is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since tanh(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Websites/Wagner Projects/Savvy_Shopper/savvy-shopper/node_modules/mathjs/es/function/trigonometry/tanh.js"],"names":["factory","deepMap","tanh","_tanh","name","dependencies","createTanh","_ref","typed","number","Complex","x","BigNumber","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,oBAA9B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAOA,KAAK,CAAC,MAAD,EAAS;AACnBC,IAAAA,MAAM,EAAEN,KADW;AAEnBO,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACT,IAAF,EAAP;AACD,KAJkB;AAKnBU,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBD,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACT,IAAF,EAAP;AACD,KAPkB;AAQnBW,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcF,CAAd,EAAiB;AACrB,UAAI,CAACA,CAAC,CAACG,OAAF,CAAUH,CAAC,CAACI,WAAF,CAAcC,UAAd,CAAyBC,KAAnC,CAAL,EAAgD;AAC9C,cAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,aAAO,KAAKP,CAAC,CAACQ,KAAP,CAAP;AACD,KAdkB;AAenB,sBAAkB,SAASC,WAAT,CAAqBT,CAArB,EAAwB;AACxC;AACA,aAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;AACD;AAlBkB,GAAT,CAAZ;AAoBD,CA/C6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { tanh as _tanh } from '../../utils/number';\nvar name = 'tanh';\nvar dependencies = ['typed'];\nexport var createTanh = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the hyperbolic tangent of a value,\n   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.tanh(x)\n   *\n   * Examples:\n   *\n   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n   *    math.tanh(0.5)                   // returns 0.46211715726000974\n   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974\n   *    1 / math.coth(0.5)               // returns 0.46211715726000974\n   *\n   * See also:\n   *\n   *    sinh, cosh, coth\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x\n   */\n  return typed('tanh', {\n    number: _tanh,\n    Complex: function Complex(x) {\n      return x.tanh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.tanh();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function tanh is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since tanh(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}